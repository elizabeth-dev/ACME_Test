// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	"context"

	"github.com/stretchr/testify/mock"
	"google.golang.org/protobuf/types/known/emptypb"

	v1 "github.com/elizabeth-dev/ACME_Test/pkg/api/v1"
)

// UserServiceServer is an autogenerated mock type for the UserServiceServer type
type UserServiceServer struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: _a0, _a1
func (_m *UserServiceServer) CreateUser(_a0 context.Context, _a1 *v1.CreateUserRequest) (*v1.User, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1.User
	if rf, ok := ret.Get(0).(func(context.Context, *v1.CreateUserRequest) *v1.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v1.CreateUserRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsers provides a mock function with given fields: _a0, _a1
func (_m *UserServiceServer) GetUsers(_a0 *v1.GetUsersRequest, _a1 v1.UserService_GetUsersServer) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1.GetUsersRequest, v1.UserService_GetUsersServer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveUser provides a mock function with given fields: _a0, _a1
func (_m *UserServiceServer) RemoveUser(_a0 context.Context, _a1 *v1.RemoveUserRequest) (*emptypb.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *emptypb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *v1.RemoveUserRequest) *emptypb.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v1.RemoveUserRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: _a0, _a1
func (_m *UserServiceServer) UpdateUser(_a0 context.Context, _a1 *v1.UpdateUserRequest) (*v1.User, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1.User
	if rf, ok := ret.Get(0).(func(context.Context, *v1.UpdateUserRequest) *v1.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v1.UpdateUserRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserServiceServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserServiceServer creates a new instance of UserServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserServiceServer(t mockConstructorTestingTNewUserServiceServer) *UserServiceServer {
	mock := &UserServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
