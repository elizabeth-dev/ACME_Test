// Code generated by mockery v2.14.0. DO NOT EDIT.

package handler_mocks

import (
	"context"

	"github.com/elizabeth-dev/ACME_Test/internal/app/users/app/query"
	"github.com/stretchr/testify/mock"
)

// IGetUserByIdHandler is an autogenerated mock type for the IGetUserByIdHandler type
type IGetUserByIdHandler struct {
	mock.Mock
}

// Handle provides a mock function with given fields: ctx, userId
func (_m *IGetUserByIdHandler) Handle(ctx context.Context, userId string) (*query.User, error) {
	ret := _m.Called(ctx, userId)

	var r0 *query.User
	if rf, ok := ret.Get(0).(func(context.Context, string) *query.User); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*query.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIGetUserByIdHandler interface {
	mock.TestingT
	Cleanup(func())
}

// NewIGetUserByIdHandler creates a new instance of IGetUserByIdHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIGetUserByIdHandler(t mockConstructorTestingTNewIGetUserByIdHandler) *IGetUserByIdHandler {
	mock := &IGetUserByIdHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
