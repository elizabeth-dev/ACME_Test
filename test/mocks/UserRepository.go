// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	"context"

	"github.com/elizabeth-dev/FACEIT_Test/internal/pkg/utils/query_utils"
	"github.com/stretchr/testify/mock"

	"github.com/elizabeth-dev/FACEIT_Test/internal/app/users/domain/user"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// AddUser provides a mock function with given fields: ctx, _a1
func (_m *UserRepository) AddUser(ctx context.Context, _a1 *user.User) error {
	ret := _m.Called(ctx, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *user.User) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserById provides a mock function with given fields: ctx, userId
func (_m *UserRepository) GetUserById(ctx context.Context, userId string) (*user.User, error) {
	ret := _m.Called(ctx, userId)

	var r0 *user.User
	if rf, ok := ret.Get(0).(func(context.Context, string) *user.User); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsers provides a mock function with given fields: ctx, filters, sort, pagination
func (_m *UserRepository) GetUsers(ctx context.Context, filters []query_utils.Filter, sort []query_utils.Sort, pagination query_utils.Pagination) ([]*user.User, error) {
	ret := _m.Called(ctx, filters, sort, pagination)

	var r0 []*user.User
	if rf, ok := ret.Get(0).(func(context.Context, []query_utils.Filter, []query_utils.Sort, query_utils.Pagination) []*user.User); ok {
		r0 = rf(ctx, filters, sort, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*user.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []query_utils.Filter, []query_utils.Sort, query_utils.Pagination) error); ok {
		r1 = rf(ctx, filters, sort, pagination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveUser provides a mock function with given fields: ctx, userId
func (_m *UserRepository) RemoveUser(ctx context.Context, userId string) error {
	ret := _m.Called(ctx, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUser provides a mock function with given fields: ctx, _a1
func (_m *UserRepository) UpdateUser(ctx context.Context, _a1 *user.User) error {
	ret := _m.Called(ctx, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *user.User) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUserRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserRepository(t mockConstructorTestingTNewUserRepository) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
