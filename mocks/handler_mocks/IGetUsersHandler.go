// Code generated by mockery v2.14.0. DO NOT EDIT.

package handler_mocks

import (
	"context"

	"github.com/elizabeth-dev/FACEIT_Test/internal/app/users/app/query"
	"github.com/stretchr/testify/mock"
)

// IGetUsersHandler is an autogenerated mock type for the IGetUsersHandler type
type IGetUsersHandler struct {
	mock.Mock
}

// Handle provides a mock function with given fields: ctx, _a1
func (_m *IGetUsersHandler) Handle(ctx context.Context, _a1 query.GetUsers) ([]*query.User, error) {
	ret := _m.Called(ctx, _a1)

	var r0 []*query.User
	if rf, ok := ret.Get(0).(func(context.Context, query.GetUsers) []*query.User); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*query.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, query.GetUsers) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIGetUsersHandler interface {
	mock.TestingT
	Cleanup(func())
}

// NewIGetUsersHandler creates a new instance of IGetUsersHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIGetUsersHandler(t mockConstructorTestingTNewIGetUsersHandler) *IGetUsersHandler {
	mock := &IGetUsersHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
