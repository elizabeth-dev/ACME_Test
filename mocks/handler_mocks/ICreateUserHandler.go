// Code generated by mockery v2.14.0. DO NOT EDIT.

package handler_mocks

import (
	"context"

	"github.com/elizabeth-dev/FACEIT_Test/internal/app/users/app/command"

	"github.com/stretchr/testify/mock"
)

// ICreateUserHandler is an autogenerated mock type for the ICreateUserHandler type
type ICreateUserHandler struct {
	mock.Mock
}

// Handle provides a mock function with given fields: ctx, cmd
func (_m *ICreateUserHandler) Handle(ctx context.Context, cmd command.CreateUser) (string, error) {
	ret := _m.Called(ctx, cmd)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, command.CreateUser) string); ok {
		r0 = rf(ctx, cmd)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, command.CreateUser) error); ok {
		r1 = rf(ctx, cmd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewICreateUserHandler interface {
	mock.TestingT
	Cleanup(func())
}

// NewICreateUserHandler creates a new instance of ICreateUserHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewICreateUserHandler(t mockConstructorTestingTNewICreateUserHandler) *ICreateUserHandler {
	mock := &ICreateUserHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
